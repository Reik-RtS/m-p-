/*

package com.BLA.BaseDeDatos;

import android.animation.*;
import android.app.*;
import android.app.AlertDialog;
import android.content.*;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.*;
import android.graphics.*;
import android.graphics.drawable.*;
import android.media.*;
import android.net.*;
import android.net.Uri;
import android.os.*;
import android.os.Bundle;
import android.text.*;
import android.text.Editable;
import android.text.TextWatcher;
import android.text.style.*;
import android.util.*;
import android.view.*;
import android.view.View;
import android.view.View.*;
import android.view.animation.*;
import android.webkit.*;
import android.widget.*;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import androidx.annotation.*;
import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.DialogFragment;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import com.google.android.material.button.*;
import com.google.android.material.textfield.*;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.io.*;
import java.io.InputStream;
import java.text.*;
import java.util.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.regex.*;
import org.json.*;

public class ChatActivity extends AppCompatActivity {
	
	private HashMap<String, Object> map = new HashMap<>();
	private String site = "";
	private String chat = "";
	private double nr = 0;
	private boolean blisV = false;
	private double position = 0;
	private HashMap<String, Object> map_search = new HashMap<>();
	
	private ArrayList<HashMap<String, Object>> list = new ArrayList<>();
	private ArrayList<String> yLabels = new ArrayList<>();
	private ArrayList<String> xLabels = new ArrayList<>();
	private  ArrayList<Float> values = new ArrayList<>();
	private ArrayList<HashMap<String, Object>> listSearch = new ArrayList<>();
	
	private LinearLayout content_main;
	private TextView textview1;
	private LinearLayout base1;
	private TextView textview2;
	private LinearLayout linear_base;
	private LinearLayout linear_anadidor;
	private TextInputLayout textinputlayout1;
	private LinearLayout linear2;
	private ListView listview1;
	private LinearLayout base3;
	private EditText edit_date;
	private EditText edit_value;
	private MaterialButton materialbutton1;
	private EditText edittext1;
	private LinearLayout ser0;
	private TextView textview3;
	private LinearLayout ser;
	private TextView textview4;
	private ImageView imageview4;
	private ImageView imageview5;
	private ImageView imageview2;
	private ImageView imageview3;
	
	private RequestNetwork message;
	private RequestNetwork.RequestListener _message_request_listener;
	private RequestNetwork send;
	private RequestNetwork.RequestListener _send_request_listener;
	private AlertDialog.Builder dialog;
	private RequestNetwork r;
	private RequestNetwork.RequestListener _r_request_listener;
	private Intent i = new Intent();
	
	@Override
	protected void onCreate(Bundle _savedInstanceState) {
		super.onCreate(_savedInstanceState);
		setContentView(R.layout.chat);
		initialize(_savedInstanceState);
		initializeLogic();
	}
	
	private void initialize(Bundle _savedInstanceState) {
		content_main = findViewById(R.id.content_main);
		textview1 = findViewById(R.id.textview1);
		base1 = findViewById(R.id.base1);
		textview2 = findViewById(R.id.textview2);
		linear_base = findViewById(R.id.linear_base);
		linear_anadidor = findViewById(R.id.linear_anadidor);
		textinputlayout1 = findViewById(R.id.textinputlayout1);
		linear2 = findViewById(R.id.linear2);
		listview1 = findViewById(R.id.listview1);
		base3 = findViewById(R.id.base3);
		edit_date = findViewById(R.id.edit_date);
		edit_value = findViewById(R.id.edit_value);
		materialbutton1 = findViewById(R.id.materialbutton1);
		edittext1 = findViewById(R.id.edittext1);
		ser0 = findViewById(R.id.ser0);
		textview3 = findViewById(R.id.textview3);
		ser = findViewById(R.id.ser);
		textview4 = findViewById(R.id.textview4);
		imageview4 = findViewById(R.id.imageview4);
		imageview5 = findViewById(R.id.imageview5);
		imageview2 = findViewById(R.id.imageview2);
		imageview3 = findViewById(R.id.imageview3);
		message = new RequestNetwork(this);
		send = new RequestNetwork(this);
		dialog = new AlertDialog.Builder(this);
		r = new RequestNetwork(this);
		
		materialbutton1.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View _view) {
				if (edit_date.getText().toString().equals("") && edit_value.getText().toString().equals("")) {
					if (edit_date.getText().toString().equals("") && edit_value.getText().toString().equals("")) {
						SketchwareUtil.showMessage(getApplicationContext(), "⚠ Rellene los campos");
					}
					else {
						if (edit_date.getText().toString().equals("")) {
							SketchwareUtil.showMessage(getApplicationContext(), "⚠ Rellene el nombre");
							return;
						}
						if (edit_value.getText().toString().equals("")) {
							SketchwareUtil.showMessage(getApplicationContext(), "⚠ Rellene el monto");
							return;
						}
					}
				}
				else {
					map.clear();
					map = new HashMap<>();
					map.put("usuario", edit_date.getText().toString());
					map.put("monto", edit_value.getText().toString());
					send.setParams(map, RequestNetworkController.REQUEST_PARAM);
					send.startRequestNetwork(RequestNetworkController.POST, site.concat("/send.php"), "", _send_request_listener);
					edit_date.setText("");
					edit_value.setText("");
				}
			}
		});
		
		edittext1.addTextChangedListener(new TextWatcher() {
			@Override
			public void onTextChanged(CharSequence _param1, int _param2, int _param3, int _param4) {
				final String _charSeq = _param1.toString();
				if (_charSeq.equals("")) {
					listview1.setAdapter(new Listview1Adapter(list));
					((BaseAdapter)listview1.getAdapter()).notifyDataSetChanged();
				}
				else {
					_SearchListMap(list, listSearch, "usuario", _charSeq);
				}
			}
			
			@Override
			public void beforeTextChanged(CharSequence _param1, int _param2, int _param3, int _param4) {
				
			}
			
			@Override
			public void afterTextChanged(Editable _param1) {
				
			}
		});
		
		imageview4.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View _view) {
				_shortB(1);
			}
		});
		
		imageview5.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View _view) {
				_shortB(2);
			}
		});
		
		imageview2.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View _view) {
				_shortB(3);
			}
		});
		
		imageview3.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View _view) {
				_shortB(4);
			}
		});
		
		_message_request_listener = new RequestNetwork.RequestListener() {
			@Override
			public void onResponse(String _param1, String _param2, HashMap<String, Object> _param3) {
				final String _tag = _param1;
				final String _response = _param2;
				final HashMap<String, Object> _responseHeaders = _param3;
				textview1.setText("Online");
				textview1.setTextColor(0xFFFFFFFF);
				if (_response.equals(chat)) {
					SketchwareUtil.showMessage(getApplicationContext(), _response);
				}
				else {
					if (_response.equals("")) {
						SketchwareUtil.showMessage(getApplicationContext(), "⚠ No hay nada en la base de datos");
					}
					else {
						list.clear();
						map.clear();
						list = new Gson().fromJson(_response, new TypeToken<ArrayList<HashMap<String, Object>>>(){}.getType());
						listview1.setAdapter(new Listview1Adapter(list));
						((BaseAdapter)listview1.getAdapter()).notifyDataSetChanged();
						listview1.setSelection((int)list.size());
						_generateValues();
					}
					chat = _response;
				}
			}
			
			@Override
			public void onErrorResponse(String _param1, String _param2) {
				final String _tag = _param1;
				final String _message = _param2;
				textview1.setText("Offline");
				textview1.setTextColor(0xFFF44336);
				SketchwareUtil.showMessage(getApplicationContext(), _message);
				message.startRequestNetwork(RequestNetworkController.GET, site.concat("/message.json"), "", _message_request_listener);
			}
		};
		
		_send_request_listener = new RequestNetwork.RequestListener() {
			@Override
			public void onResponse(String _param1, String _param2, HashMap<String, Object> _param3) {
				final String _tag = _param1;
				final String _response = _param2;
				final HashMap<String, Object> _responseHeaders = _param3;
				message.startRequestNetwork(RequestNetworkController.GET, site.concat("/message.json"), "", _message_request_listener);
			}
			
			@Override
			public void onErrorResponse(String _param1, String _param2) {
				final String _tag = _param1;
				final String _message = _param2;
				SketchwareUtil.showMessage(getApplicationContext(), _message);
			}
		};
		
		_r_request_listener = new RequestNetwork.RequestListener() {
			@Override
			public void onResponse(String _param1, String _param2, HashMap<String, Object> _param3) {
				final String _tag = _param1;
				final String _response = _param2;
				final HashMap<String, Object> _responseHeaders = _param3;
				
			}
			
			@Override
			public void onErrorResponse(String _param1, String _param2) {
				final String _tag = _param1;
				final String _message = _param2;
				
			}
		};
	}
	
	private void initializeLogic() {
		linear2.setBackground(new GradientDrawable() { public GradientDrawable getIns(int a, int b) { this.setCornerRadius(a); this.setColor(b); return this; } }.getIns((int)30, 0xFF3AC6A5));
		linear2.setElevation((float)8);
		site = getIntent().getStringExtra("host");
		message.startRequestNetwork(RequestNetworkController.GET, site.concat("/message.json"), "", _message_request_listener);
	}
	
	public void _lib() {
	}
	public static class LineChartView extends View {
		    
		    //Example library Line Chart View for Sketchware Jxue.
		
		    private static final float MAX_SMOOTH_VALUE = 0.5f;
		    private static final float DEFAULT_SMOOTH_SIZE = 0.3f;
		    private static final int DEFAULT_CIRCLE_SIZE = 8;
		    private static final int DEFAULT_STROKE_SIZE = 2;
		    private static final int DEFAULT_TEXT_SIZE = 40;
		    private static final int DEFAULT_BORDER = 10;
		
		    private static final int DEFAULT_CHART_COLOR = 0xFF3AC6A5;
		
		    private Paint chartLinePaint;
		    private Paint textPaint;
		    private Paint axisPaint;
		    private Path chartLinePath;
		    private List<Float> values;
		    private List<String> axisXLabels;
		    private List<String> axisYLabels;
		    private float minY;
		    private float maxY;
		
		    private float circleSize;
		    private float strokeSize;
		    private float leftXOffset;
		    private float bottomYOffset;
		    private float rightXOffset;
		    private float topYOffset;
		    private float smoothSize = DEFAULT_SMOOTH_SIZE;
		    private boolean isFillBottom = true;
		    private boolean isShowPoints = true;
		    private boolean isShowXAxis = true;
		    private boolean isShowYAxis = true;
		
		    public LineChartView(Context context) {
			        super(context);
			        init(context, null);
			    }
		
		    public LineChartView(Context context, @Nullable AttributeSet attrs) {
			        super(context, attrs);
			        init(context, attrs);
			    }
		
		    public LineChartView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
			        super(context, attrs, defStyleAttr);
			        init(context, attrs);
			    }
		
		    public LineChartView(Context context, @Nullable AttributeSet attrs, int defStyleAttr, int defStyleRes) {
			        super(context, attrs, defStyleAttr, defStyleRes);
			        init(context, attrs);
			    }
		
		    private void init(Context context, AttributeSet attrs) {
			        float scale = context.getResources().getDisplayMetrics().density;
			        circleSize = scale * DEFAULT_CIRCLE_SIZE;
			        leftXOffset = circleSize / 2;
			        bottomYOffset = leftXOffset;
			        rightXOffset = leftXOffset;
			        topYOffset = leftXOffset;
			        strokeSize = scale * DEFAULT_STROKE_SIZE;
			
			        chartLinePaint = new Paint();
			        chartLinePaint.setAntiAlias(true);
			        chartLinePaint.setStrokeWidth(strokeSize);
			
			        textPaint = new Paint();
			        textPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
			        textPaint.setColor(Color.GRAY);
			        textPaint.setTextSize(DEFAULT_TEXT_SIZE);
			
			        axisPaint = new Paint();
			        axisPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
			        axisPaint.setColor(Color.DKGRAY);
			
			        chartLinePath = new Path();
			    }
		
		    public void setChartLineData(List<Float> values) {
			        this.values = values;
			        if (values.size() > 0) {
				            maxY = values.get(0);
				            minY = values.get(0);
				            for (float y : values) {
					                if (y > maxY) {
						                    maxY = y;
						                }
					                if (y < minY) {
						                    minY = y;
						                }
					            }
				        }
			
			        invalidate();
			    }
		
		    public void setSmoothSize(float smoothSize) {
			        if (smoothSize > MAX_SMOOTH_VALUE || smoothSize <= 0) {
				            Log.e("LineChartView", "Incorrect smooth value please use: (value > 0 && value < 0.5f) ");
				        } else {
				            this.smoothSize = smoothSize;
				        }
			    }
		
		    public void setAxisXLabels(List<String> axisXLabels) {
			        this.axisXLabels = axisXLabels;
			        if (axisXLabels != null && axisXLabels.size() > 0) {
				            Rect labelRect = calculateTextSize(axisXLabels.get(0), textPaint);
				            bottomYOffset = labelRect.height() * 2;
				            rightXOffset = labelRect.width() / 2;
				        }
			    }
		
		    public void setAxisYLabels(List<String> axisYLabels) {
			        this.axisYLabels = axisYLabels;
			        if (axisYLabels != null && axisYLabels.size() > 0) {
				            Rect labelRect = calculateTextSize(axisYLabels.get(0), textPaint);
				            leftXOffset = labelRect.width() + ((labelRect.width() / axisYLabels.get(0).length()) * 2);
				            topYOffset = labelRect.height();
				//            float step = (maxY - minY) / axisYLabels.length;
				//            maxY += step;
				//            minY = minY > 0 ? minY - step : 0;
				        }
			    }
		
		    public void setFillBottom(boolean fillBottom) {
			        isFillBottom = fillBottom;
			    }
		
		    public void setShowPoints(boolean showPoints) {
			        isShowPoints = showPoints;
			    }
		
		    public void setShowXAxis(boolean showXAxis) {
			        isShowXAxis = showXAxis;
			    }
		
		    public void setShowYAxis(boolean showYAxis) {
			        isShowYAxis = showYAxis;
			    }
		
		    public void setAxisTextSize(@DimenRes int textSizeRes) {
			        textPaint.setTextSize(getResources().getDimensionPixelSize(textSizeRes));
			    }
		
		    public void setAxisTextColor(@ColorRes int colorRes) {
			        axisPaint.setColor(getResources().getColor(colorRes));
			    }
		
		    private Rect calculateTextSize(String text, Paint textPaint) {
			        Rect bounds = new Rect();
			        textPaint.getTextBounds(text, 0, text.length(), bounds);
			        return bounds;
			    }
		
		    private List<PointF> calculatePoints(List<Float> values) {
			        int valueSize = values.size();
			        final float widthWithoutBorders = getMeasuredWidth() - leftXOffset - rightXOffset;
			        final float height = getMeasuredHeight() - bottomYOffset - topYOffset;
			        final float dX = valueSize > 1 ? valueSize - 1 : 2;
			        final float dY = (maxY - minY) > 0 ? (maxY - minY) : 2;
			        List<PointF> points = new ArrayList<PointF>(valueSize);
			        for (int i = 0; i < valueSize; i++) {
				            float x = leftXOffset + i * widthWithoutBorders / (axisXLabels != null && axisXLabels.size() > valueSize ? axisXLabels.size() - 1 : dX);
				            float y = topYOffset + height - (values.get(i) - minY) * height / dY;
				            points.add(new PointF(x, y));
				        }
			        return points;
			    }
		
		    @Override
		    protected void onDraw(Canvas canvas) {
			        super.onDraw(canvas);
			        if (values != null && values.size() > 0) {
				            List<PointF> points = calculatePoints(values);
				            drawChartLine(canvas, points);
				            drawPointCircles(canvas, points);
				            drawAxisYLabels(canvas);
				            drawAxisXLabels(canvas);
				        }
			    }
		
		    private void drawChartLine(Canvas canvas, List<PointF> points) {
			        int size = points.size();
			        final float height = getMeasuredHeight() - bottomYOffset;
			
			        chartLinePath.reset();
			
			        // Calculate smooth chart line
			        float lX = 0, lY = 0;
			        chartLinePath.moveTo(points.get(0).x, points.get(0).y);
			        for (int i = 0; i < size; i++) {
				            // We have to skip first point
				            PointF currentPoint = points.get(i);
				            if(i > 0) {
					                // first control point
					                PointF previousPoint = points.get(i - 1);    // previous point
					                float x1 = previousPoint.x + lX;
					                float y1 = previousPoint.y + lY;
					
					                // second control point
					                PointF p1 = points.get(i + 1 < size ? i + 1 : i);    // next point
					                lX = (p1.x - previousPoint.x) / 2 * smoothSize;        // (lX,lY) is the slope of the reference line
					                lY = (p1.y - previousPoint.y) / 2 * smoothSize;
					                float x2 = currentPoint.x - lX;
					                float y2 = currentPoint.y - lY;
					
					                chartLinePath.cubicTo(x1, y1, x2, y2, currentPoint.x, currentPoint.y);
					            }
				
				            if (isShowYAxis) {
					                // Y Axis lines
					                canvas.drawLine(currentPoint.x, getMeasuredHeight() - bottomYOffset, currentPoint.x, topYOffset, axisPaint);
					            }
				        }
			
			
			        // Draw chart line path
			        chartLinePaint.setColor(DEFAULT_CHART_COLOR);
			        chartLinePaint.setStyle(Paint.Style.STROKE);
			        canvas.drawPath(chartLinePath, chartLinePaint);
			
			        // Draw bottom area
			        if (isFillBottom) {
				            chartLinePaint.setStyle(Paint.Style.FILL);
				            chartLinePaint.setColor((DEFAULT_CHART_COLOR & 0xFFFFFF) | 0x10000000);
				            chartLinePath.lineTo(points.get(size - 1).x, height);
				            chartLinePath.lineTo(points.get(0).x, height);
				            chartLinePath.close();
				            canvas.drawPath(chartLinePath, chartLinePaint);
				        }
			
			    }
		
		    private void drawPointCircles(Canvas canvas, List<PointF> points) {
			        if (isShowPoints) {
				            chartLinePaint.setColor(DEFAULT_CHART_COLOR);
				            chartLinePaint.setStyle(Paint.Style.FILL_AND_STROKE);
				            for (PointF point : points) {
					                canvas.drawCircle(point.x, point.y, circleSize / 2, chartLinePaint);
					            }
				            chartLinePaint.setStyle(Paint.Style.FILL);
				            chartLinePaint.setColor(Color.WHITE);
				            for (PointF point : points) {
					                canvas.drawCircle(point.x, point.y, (circleSize - strokeSize) / 2, chartLinePaint);
					            }
				        }
			    }
		
		    private void drawAxisYLabels(Canvas canvas) {
			        if (axisYLabels != null && axisYLabels.size() > 0) {
				            final float heightWithoutBorders = getMeasuredHeight() - bottomYOffset - topYOffset;
				            final float widthWithoutRightBorder = getMeasuredWidth() - rightXOffset;
				            int yParts = axisYLabels.size() - 1;
				            //TODO add spaces after max and before min values
				//            yParts += 2; // Add one part upper and one part above of min and max
				            textPaint.setTextAlign(Paint.Align.LEFT);
				            for (int i = 0; i < axisYLabels.size(); i++) {
					                float y = ((heightWithoutBorders / yParts) * (yParts - i)) + topYOffset;
					                if (isShowXAxis) {
						                    // X Axis lines
						                    canvas.drawLine(leftXOffset, y, widthWithoutRightBorder, y, axisPaint);
						                }
					                canvas.drawText(axisYLabels.get(i), 0, y + textPaint.getTextSize() / 2, textPaint);
					            }
				        }
			    }
		
		    private void drawAxisXLabels(Canvas canvas) {
			        if (axisXLabels != null && axisXLabels.size() > 0) {
				            final float heightWithoutBottomBorder = getMeasuredHeight() - bottomYOffset;
				            final float widthWithoutBorders = getMeasuredWidth() - leftXOffset - rightXOffset;
				            int dY = axisXLabels.size() - 1;
				            textPaint.setTextAlign(Paint.Align.CENTER);
				            for (int i = 0; i < axisXLabels.size(); i++) {
					                float x = ((widthWithoutBorders / dY) * i) + leftXOffset;
					                canvas.drawText(axisXLabels.get(i), x, getMeasuredHeight(), textPaint);
					            }
				        }
			    }
		
	}
	{
	}
	
	
	public void _graph() {
		chartFullView = new LineChartView(this);
		base3.addView(chartFullView);
		chartFullView.setSmoothSize(0.3f);
		chartFullView.setAxisYLabels(yLabels);
		chartFullView.setAxisXLabels(xLabels);
		chartFullView.setChartLineData(values);
	}
	private LineChartView chartView;
	{
	}
	private LineChartView chartPointView;
	{
	}
	private LineChartView chartFullView;
	{
	}
	
	
	public void _generateValues() {
		try {
			yLabels.clear();
			xLabels.clear();
			values.clear();
			nr = 0;
			for(int _repeat97 = 0; _repeat97 < (int)(list.size()); _repeat97++) {
				xLabels.add(list.get((int)nr).get("usuario").toString());
				float valor=Float.parseFloat(list.get((int)nr).get("monto").toString());
				// or  Float.valueOf(string)
				values.add(valor);
				nr++;
			}
			_sort_list_map(list, "monto");
			nr = 0;
			for(int _repeat110 = 0; _repeat110 < (int)(list.size()); _repeat110++) {
				yLabels.add(list.get((int)nr).get("monto").toString());
				nr++;
			}
			_graph();
			//List<Float> values = new ArrayList<Float>();
		} catch (Exception e) {}
	}
	private Float valor;
	{
	}
	
	
	public void _sort_list_map(final ArrayList<HashMap<String, Object>> _map, final String _key) {
		Collections.sort(_map,new Comparator<HashMap<String,Object>>(){ public int compare(HashMap<String,Object> mapping1, HashMap<String,Object> mapping2){ return mapping1.get(_key).toString().compareToIgnoreCase(mapping2.get(_key).toString()); }});
	}
	
	
	public void _shortB(final double _b) {
		if (_b == 1) {
			_sort_list_map(list, "usuario");
			((BaseAdapter)listview1.getAdapter()).notifyDataSetChanged();
		}
		else {
			if (_b == 2) {
				_sort_list_map_descending(list, "usuario");
				((BaseAdapter)listview1.getAdapter()).notifyDataSetChanged();
			}
			else {
				if (_b == 3) {
					_sort_list_map_descending(list, "monto");
					((BaseAdapter)listview1.getAdapter()).notifyDataSetChanged();
				}
				else {
					if (_b == 4) {
						_sort_list_map(list, "monto");
						((BaseAdapter)listview1.getAdapter()).notifyDataSetChanged();
					}
					else {
						
					}
				}
			}
		}
	}
	
	
	public void _SearchListMap(final ArrayList<HashMap<String, Object>> _list_map, final ArrayList<HashMap<String, Object>> _list_serach, final String _key, final String _text) {
		position = 0;
		_list_serach.clear();
		if (_text.equals("")) {
			for(int _repeat48 = 0; _repeat48 < (int)(_list_map.size()); _repeat48++) {
				map_search = _list_map.get((int)position);
				_list_serach.add(map_search);
				position++;
			}
		}
		else {
			try{
				for(int _repeat13 = 0; _repeat13 < (int)(_list_map.size()); _repeat13++) {
					if (_list_map.get((int)position).containsKey(_key)) {
						if (_list_map.get((int)position).get(_key).toString().toLowerCase().contains(_text.toLowerCase())) {
							map_search = _list_map.get((int)position);
							_list_serach.add(map_search);
						}
					}
					position++;
				}
				listview1.setAdapter(new Listview1Adapter(listSearch));
				((BaseAdapter)listview1.getAdapter()).notifyDataSetChanged();
			}catch(Exception e){
				SketchwareUtil.showMessage(getApplicationContext(), "Error: "+e.toString());
			}
		}
	}
	
	
	public void _sort_list_map_descending(final ArrayList<HashMap<String, Object>> _map, final String _key) {
		Collections.sort(_map, new Comparator<HashMap<String, Object>>() {
			        public int compare(HashMap<String, Object> mapping1, HashMap<String, Object> mapping2) {
				            String value1 = mapping1.get(_key).toString();
				            String value2 = mapping2.get(_key).toString();
				            return value2.compareToIgnoreCase(value1);
				        }
			    });
	}
	
	public class Listview1Adapter extends BaseAdapter {
		
		ArrayList<HashMap<String, Object>> _data;
		
		public Listview1Adapter(ArrayList<HashMap<String, Object>> _arr) {
			_data = _arr;
		}
		
		@Override
		public int getCount() {
			return _data.size();
		}
		
		@Override
		public HashMap<String, Object> getItem(int _index) {
			return _data.get(_index);
		}
		
		@Override
		public long getItemId(int _index) {
			return _index;
		}
		
		@Override
		public View getView(final int _position, View _v, ViewGroup _container) {
			LayoutInflater _inflater = getLayoutInflater();
			View _view = _v;
			if (_view == null) {
				_view = _inflater.inflate(R.layout.message, null);
			}
			
			final LinearLayout linear1 = _view.findViewById(R.id.linear1);
			final LinearLayout linear4 = _view.findViewById(R.id.linear4);
			final TextView text_data = _view.findViewById(R.id.text_data);
			final LinearLayout linear3 = _view.findViewById(R.id.linear3);
			final TextView text_value = _view.findViewById(R.id.text_value);
			final ImageView imageview1 = _view.findViewById(R.id.imageview1);
			
			text_data.setText(_data.get((int)_position).get("usuario").toString());
			text_value.setText(_data.get((int)_position).get("monto").toString());
			imageview1.setOnClickListener(new View.OnClickListener() {
				@Override
				public void onClick(View _view) {
					dialog.setNegativeButton("↕ Usuario", new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface _dialog, int _which) {
							((ClipboardManager) getSystemService(getApplicationContext().CLIPBOARD_SERVICE)).setPrimaryClip(ClipData.newPlainText("clipboard", _data.get((int)_position).get("usuario").toString()));
							SketchwareUtil.showMessage(getApplicationContext(), "Se ha copiado el usuario: ".concat(_data.get((int)_position).get("usuario").toString()));
						}
					});
					dialog.setPositiveButton("↕ Monto", new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface _dialog, int _which) {
							((ClipboardManager) getSystemService(getApplicationContext().CLIPBOARD_SERVICE)).setPrimaryClip(ClipData.newPlainText("clipboard", _data.get((int)_position).get("monto").toString()));
							SketchwareUtil.showMessage(getApplicationContext(), "Se ha copiado el monto de: ".concat(_data.get((int)_position).get("monto").toString()));
						}
					});
					dialog.setNeutralButton("⤵ Borrar", new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface _dialog, int _which) {
							_data.remove((int)(_position));
							map = new HashMap<>();
							map.put("new", new Gson().toJson(_data));
							r.setParams(map, RequestNetworkController.REQUEST_PARAM);
							r.startRequestNetwork(RequestNetworkController.POST, site.concat("/new.php"), "", _r_request_listener);
						}
					});
					dialog.create().show();
				}
			});
			
			return _view;
		}
	}
	
	@Deprecated
	public void showMessage(String _s) {
		Toast.makeText(getApplicationContext(), _s, Toast.LENGTH_SHORT).show();
	}
	
	@Deprecated
	public int getLocationX(View _v) {
		int _location[] = new int[2];
		_v.getLocationInWindow(_location);
		return _location[0];
	}
	
	@Deprecated
	public int getLocationY(View _v) {
		int _location[] = new int[2];
		_v.getLocationInWindow(_location);
		return _location[1];
	}
	
	@Deprecated
	public int getRandom(int _min, int _max) {
		Random random = new Random();
		return random.nextInt(_max - _min + 1) + _min;
	}
	
	@Deprecated
	public ArrayList<Double> getCheckedItemPositionsToArray(ListView _list) {
		ArrayList<Double> _result = new ArrayList<Double>();
		SparseBooleanArray _arr = _list.getCheckedItemPositions();
		for (int _iIdx = 0; _iIdx < _arr.size(); _iIdx++) {
			if (_arr.valueAt(_iIdx))
			_result.add((double)_arr.keyAt(_iIdx));
		}
		return _result;
	}
	
	@Deprecated
	public float getDip(int _input) {
		return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, _input, getResources().getDisplayMetrics());
	}
	
	@Deprecated
	public int getDisplayWidthPixels() {
		return getResources().getDisplayMetrics().widthPixels;
	}
	
	@Deprecated
	public int getDisplayHeightPixels() {
		return getResources().getDisplayMetrics().heightPixels;
	}
}

*/